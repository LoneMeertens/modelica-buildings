within Buildings.Fluid.SolarCollectors.PVT.BaseClasses;
model PVOrientedDCPower
  "Model for a photovoltaic installation which has a power output (DC)"

  parameter Modelica.Units.SI.Irradiance G_STC=1000 "Irradiance at Standard Conditions (usualy 1000 W/m2)"
    annotation (Dialog(group="Characteristics of the photovoltaic panel"));
  parameter Modelica.Units.SI.Power P_STC=370 "Power of one photovoltaic panel at Standard Conditions, usualy equal to power at Maximum Power Point (MPP)"
    annotation (Dialog(group="Characteristics of the photovoltaic panel"));
  parameter Modelica.Units.SI.LinearTemperatureCoefficient gamma=-0.0037 "Temperature coefficient of the photovoltaic panel(s)"
    annotation (Dialog(group="Characteristics of the photovoltaic panel"));
  parameter Modelica.Units.SI.Efficiency P_loss_factor=0.14 "Loss factor of the photovoltaic panel(s)"
    annotation (Dialog(group="Characteristics of the photovoltaic panel"));
  parameter Real n(min=Modelica.Constants.small)=5 "Number of photovoltaic panels in the photovoltaic installation"
    annotation (Dialog(group="Characteristics of the photovoltaic installation"));
  parameter Modelica.Units.SI.Efficiency module_efficiency=0.3 "Module efficiency of the photovoltaic installation";
  parameter Modelica.Units.SI.Angle til=0.785 "Surface tilt of the photovoltaic installation (0°=horizontal, 90°=vertical)"
    annotation (Dialog(group="Characteristics of the photovoltaic installation"));
  parameter Modelica.Units.SI.Angle azi=0 "Surface azimuth (0°=south, 90°=west, 180°=north, 270°=east)"
    annotation (Dialog(group="Characteristics of the photovoltaic installation"));

  Modelica.Units.SI.TemperatureDifference T_diff;
  Modelica.Units.SI.Temperature noct_adj "Adjusted nominal operating cell temperature";
  Modelica.Units.SI.Efficiency heat_loss "Heat loss coefficient of the PV panel";
  Modelica.Units.SI.Efficiency wind_loss "Wind loss coefficient of the PV panel";
  Modelica.Units.SI.Velocity wind_speed "Wind speed";
  Modelica.Units.SI.Irradiance G "Total solar irradiance";

  Buildings.BoundaryConditions.SolarIrradiation.DiffusePerez HDifTil(
    final til=til,
    final azi=azi) "Diffuse irradiation on tilted surface"
    annotation (Placement(transformation(extent={{-66,62},{-46,82}})));
  Buildings.BoundaryConditions.SolarIrradiation.DirectTiltedSurface HDirTil(
    final til=til,
    final azi=azi) "Direct irradiation on tilted surface"
    annotation (Placement(transformation(extent={{-66,35},{-46,55}})));
  Modelica.Blocks.Math.Add G_glob "Total irradiation on tilted surface"
    annotation (Placement(transformation(extent={{10,-10},{-10,10}},
        rotation=90,
        origin={0,10})));

  Modelica.Blocks.Interfaces.RealOutput P(quantity="Power", unit="W") "Power generated by the photovoltaic installation" annotation (Placement(transformation(extent={{-100,
            -10},{-120,10}})));
  Modelica.Blocks.Sources.RealExpression solarPower(y=n*P_STC*G/G_STC*(1+gamma*T_diff)*(1-P_loss_factor))
    "Power generated by the photovoltaic installation" annotation (Placement(transformation(extent={{89,-50},
            {69,-30}})));
  outer IDEAS.BoundaryConditions.SimInfoManager sim
    annotation (Placement(transformation(extent={{-100,80},{-80,100}})));

  IDEAS.Utilities.IO.SignalExchange.Read reaP(description=
        "Power generated by the PV installation", y(unit="W")) "Read"
    annotation (Placement(transformation(extent={{-20,-50},{-40,-30}})));
  Modelica.Blocks.Interfaces.RealInput T_cell annotation (Placement(
        transformation(extent={{116,-80},{84,-48}}), iconTransformation(extent=
            {{116,-80},{84,-48}})));
protected
  final parameter Modelica.Units.SI.Temperature _T_ref=25+273 "Reference temperature of the cell";
  final parameter Modelica.Units.SI.Temperature _noct=49+273 "Nominal operating cell temperature";
  final parameter Modelica.Units.SI.Velocity wind_init=9.5 "Reference wind speed";

equation
  assert(solarPower.y>=0, "Solar power must be positive");
  noct_adj=_noct+6 "We assume an average distance between the panel and roof of 1.5-2.5 in.";
  heat_loss = 1-module_efficiency/0.9 "We assume a fixed tau alpha of 0.9";
  wind_speed = sim.Va;
  wind_loss = wind_init/(5.7+3.8*0.51*wind_speed);
  G = G_glob.y;
  T_diff=T_cell-_T_ref;

  connect(sim.weaDatBus, HDifTil.weaBus) annotation (Line(
      points={{-80.1,90},{-72,90},{-72,72},{-66,72}},
      color={255,204,51},
      thickness=0.5));
  connect(sim.weaDatBus, HDirTil.weaBus) annotation (Line(
      points={{-80.1,90},{-72,90},{-72,45},{-66,45}},
      color={255,204,51},
      thickness=0.5));
  connect(HDifTil.H, G_glob.u2)
    annotation (Line(points={{-45,72},{6,72},{6,22}}, color={0,0,127}));
  connect(HDirTil.H, G_glob.u1)
    annotation (Line(points={{-45,45},{-6,45},{-6,22}}, color={0,0,127}));

  connect(solarPower.y, reaP.u)
    annotation (Line(points={{68,-40},{-18,-40}}, color={0,0,127}));
  connect(reaP.y, P) annotation (Line(points={{-41,-40},{-80,-40},{-80,0},{-110,
          0}}, color={0,0,127}));
    annotation (Dialog(group="Characteristics of the photovoltaic installation"),
    Icon(coordinateSystem(
        preserveAspectRatio=false,
        extent={{-100,-100},{100,100}},
        grid={1,1}), graphics={
        Line(points={{-100,0},{-59,0}},color={0,0,0}),
        Polygon(
          points={{-80,-52},{-32,63},{78,63},{29,-52},{-80,-52}},
          smooth=Smooth.None,
          fillColor={205,203,203},
          fillPattern=FillPattern.Solid,
          pattern=LinePattern.None,
          lineColor={0,0,0}),
        Polygon(
          points={{-69,-45},{-57,-19},{-34,-19},{-45,-45},{-69,-45}},
          smooth=Smooth.None,
          fillColor={6,13,150},
          fillPattern=FillPattern.Solid,
          pattern=LinePattern.None),
        Polygon(
          points={{-53,-9},{-41,17},{-18,17},{-29,-9},{-53,-9}},
          smooth=Smooth.None,
          fillColor={6,13,150},
          fillPattern=FillPattern.Solid,
          pattern=LinePattern.None),
        Polygon(
          points={{-38,27},{-26,53},{-3,53},{-14,27},{-38,27}},
          smooth=Smooth.None,
          fillColor={6,13,150},
          fillPattern=FillPattern.Solid,
          pattern=LinePattern.None),
        Polygon(
          points={{-36,-45},{-24,-19},{-1,-19},{-12,-45},{-36,-45}},
          smooth=Smooth.None,
          fillColor={6,13,150},
          fillPattern=FillPattern.Solid,
          pattern=LinePattern.None),
        Polygon(
          points={{-20,-9},{-8,17},{15,17},{4,-9},{-20,-9}},
          smooth=Smooth.None,
          fillColor={6,13,150},
          fillPattern=FillPattern.Solid,
          pattern=LinePattern.None),
        Polygon(
          points={{-5,27},{7,53},{30,53},{19,27},{-5,27}},
          smooth=Smooth.None,
          fillColor={6,13,150},
          fillPattern=FillPattern.Solid,
          pattern=LinePattern.None),
        Polygon(
          points={{-3,-45},{9,-19},{32,-19},{21,-45},{-3,-45}},
          smooth=Smooth.None,
          fillColor={6,13,150},
          fillPattern=FillPattern.Solid,
          pattern=LinePattern.None),
        Polygon(
          points={{13,-9},{25,17},{48,17},{37,-9},{13,-9}},
          smooth=Smooth.None,
          fillColor={6,13,150},
          fillPattern=FillPattern.Solid,
          pattern=LinePattern.None),
        Polygon(
          points={{28,27},{40,53},{63,53},{52,27},{28,27}},
          smooth=Smooth.None,
          fillColor={6,13,150},
          fillPattern=FillPattern.Solid,
          pattern=LinePattern.None),
        Text(
          extent={{-122,35},{-100,9}},
          textColor={0,0,127},
          textString="P")}),
    Diagram(
        coordinateSystem(preserveAspectRatio=false)),
    Documentation(revisions="<html>
<ul>
<li> September 27, 2023, by Javier Arroyo:<br>
Add Read and Overwrite blocks. See <a href=\"https://gitlab.kuleuven.be/positive-energy-districts/moped/-/issues/83\">!83</a>.</li>
<li> August 1, 2023, by Lucas Verleyen:<br>
Add quantity=\"Power\" and unit=\"W\" to RealOutput. (see <a href=\"https://gitlab.kuleuven.be/positive-energy-districts/moped/-/issues/112\">#112</a>)</li>
<li>
December 7, 2022, by Attila Balint and Lucas Verleyen:<br/>
Initial implementation.<br/>
</li>
</ul>
</html>",
        info="<html>
<p>
This is a simple model for a photovoltaic installation. 
The model inputs are wheater data and some parameters set by the user. 
The model outputs the power generated by the PV installation.
</p>
<p>
We use the SAM Photovoltaic Model by NREL: <br/>
Gilman, P., Dobos, A., DiOrio, N., Freeman, J., Janzou, S., Ryberg, D., 
2018, 'SAM Photovoltaic Model Technical Reference Update', 
National Renewable Energy Laboratory Report NREL/TP-6A20-67399.
</p>
</html>"));
end PVOrientedDCPower;
